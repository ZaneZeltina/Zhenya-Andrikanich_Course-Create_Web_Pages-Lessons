
/* Sākumā atceramies kā pieslēgt šriftus: */

@import url("https://fonts.googleapis.com/css?family=Poppins:regular,700&display=swap");


@font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Regular.woff2") format("woff2"),
		url("../fonts/Gilroy-Regular.woff") format("woff");
	font-weight: normal;
	font-style: normal;
	font-display: swap;
}

@font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Bold.woff2") format("woff2"),
		url("../fonts/Gilroy-Bold.woff") format("woff");
	font-weight: bold;
	font-style: normal;
	font-display: swap;
}

body {
	font-family: "Gilroy", sans-serif;
	font-size: 16px;
	font-weight: 400;
	background-color: #333;
}

/* Izskatīsim situāciju, kas bija 10tajā lekcijā par BEM metodoloģiju, kad nevarējām saprast, ko mums darīt ar tehniskajiem klašu nosaukumiem. Atgriežamies HTML dokumentā un pierakstām piemēru. Izveidojam vienu BEM bloku un BEM elementu kopā ar tehnisko klasi: _container. Šādi bloki, kur mums vajadzēs izmantot to pašu ierobežojošo kastīti - konteineri mūsu lapā var būt ļoti daudz. Strādājot uz priekšu mēs ar to saskarsimies. */

/* Mēs redzam, ka mums ir divi BEM bloki ar dieviem BEM elementiem katrā. Šādi BEM bloki mums var būt ļoti daudz. */

/* Mēs izmantojam tehnisko klases nosaukumu, lai nerakstītu katru reizi vienādus CSS parametrus katram BEM elementam. Mēs izmantojam vienu (ar vienādu nosaukumu) tehniskās klases nosaukumu daudziem blokiem. */

/* Bet mums ir vēl viens labs risinājums kā mēs varam izmantot ierobežojošās kastītes katram blokam. Nerakstot tehniskās klases, un neizmantojot papildus BEM elementus un modifikatorus. Atgriežamies HTML dokumentā un vienkāršojam bloku pierakstus. */


/* Kā mēs varam pareizi to pierakstīt. Mums jāievēro pieraksta sintakse. Izskatām vienkāršu piemēru zemāk. */

/* Kas tad ir vēršanās izmantojot CSS selektoru atribūtus? Tas ir tad, kad mēs vēršamies rakstot gan: class, gan: block. Vai: href un: https://google.com ; Šādi izskatās vēršanās izmantojot CSS selektoru atribūtus. */

[class="body"] {
	color: #ff0000;
}

/* Tieši tā pat mēs varam vērsties pie visām saitēm, kas ved uz Google. */

/* Mēs liekam datoram meklēt konkrētas saites, kas atbilst HTML dokumentā tieši šādam pierakstam. */

[href="https://google.com"] {
	color: #008000;
}

/* Izpildot šādu pierakstu mēs redzam, ka vis darbojās. Sākumā šādu vēršanos pie elementiem izmantojot CSS selektoru atribūtus varētu šķist ļoti sarežģīta. Bet tagad mums ir divi spēcīgi instrumenti. Mēs varam izvēlēties kā mums strādāt. Ievērojot BEM metodoloģiju ar tehniskajām klasēm jeb izmantojot vēršanos ar CSS selektoru atribūtu izmantošanu. */

/* Vēršanās pie elementiem izmantojot CSS selektoru atribūtus nav tik vienkārša. Tā ir daudz plašāka. Tiem piemīt vēl tādas kā regulāras izteiksmes. Kā izskatās regulāru izteiksmju pieraksts. Kā mēs to varam izmantot. Pieraksts izskatās šādi: [href$=".com"] { iekš šīm iekavām rakstot: color: red; } - mēs liekam datoram HTML dokumentā atrast tieši tās saites, kam ir šādas beigas: .com un izmantot tām sarkanu krāsu. */

/* Mēs liekam datoram meklēt HTML dokumentā visas saites, kas atbilst šādam pierakstam. Atceramies: Tādas mums var būt vairākas, daudz. */

[href$=".com"] {
	color: red;
}

/* Izpildot šādu pierakstu mēs iegūstam ļoti spēcīgu instrumentu. Ja skatamies uz šo visu loģiski, tad saprotam, ka mēs tagad varam vērsties pie visiem blokiem, kuriem nosaukuma beigās - elementa nosaukuma beigās ir: __container. Mēs varam tam izmantot CSS stilus. Mums vairs nav nepieciešams izmantot tehniskās klases. */

/* Šādi mēs paplašinām savas iespējas, jo tagad visas saites, kam ir šādi nosaukuma beigas tiks iekrāsotas sarkanā krāsā. */

/* Mēs varam veikt arī meklēšanu pēc nosaukuma sākuma. Paskatīsimies ar piemēru: */

[href^="https://"] {
	color: #0000ff;
}

/* Ievērojam, ka mums mainās pieraksts. Mēs vairs neliekam zīmi: $, bet gan liekam zīmi: ^, kas nozīmē, ka dators meklēs HTML dokumentā elementus tieši ar šādu sākuma nosaukumu, piemēros tiem norādītos CSS parametrus. */

/* Meklēšana pēc vārda izmantojot atstarpi. Šis strādās tikai tad, ja izmantosim BEM metodoloģijas nosaukumu miks. */

[class~="body-about"] {
	color: #0000ff;
}

/* Redzam, ka mēs varam sameklēt CSS selektora atribūtu pēc konkrēta vārda. Mums atkal mainās pieraksta sintakse. Aiz href mēs liekam zīmi: ~ tilde. Aiz tā rakstām visu kā iepriekš, tikai nosaukumu rakstām to, kas ir aiz atstarpes. Tā kā mūsu HTML dokumentā ir pierakstīts: body-about. */

/* Ja mums ir vajadzība meklēt tieši pēc nosaukuma, kas pierakstīts izmantojot zīmi: -, tad mums ir jāievēro cita sintakse. Bet šis darbosies tikai, ja mums ir viens klases nosaukums BEM metodoloģijā (Mums nav miks). */

/* Atgriežamies HTML dokumentā un izmainām piemēra pierakstu, lai tam ir viens klases nosaukums. */

[class|="body-about"] {
	color:#8a2be2;
}

/* Pēdējie divi varianti tike izmantoti ļoti reti. Šos visus CSS selektora atribūtus nav iespējams katru reizi atcerēties un izmantot. ja mēs strādājam stingri pēc BEM metodoloģijas, tad nav ieteicams šos izmantot. Bet mums var gadīties situācijas, kad mums visizdevīgāk ir tomēr izmantot CSS selektoru atribūtus. */

/* Tagad kad mums ir jau divi instrumenti mēs varam izvērtēt kuru, kurā gadījumā labāk izmantot. */


/* Ja pirmie divi varianti kā mēs vēršamies pie CSS selektoru atribūti ir plašāk pielietojami, tie darbojās diezgan plaši, tad pēdējie divi darbojas tikai pie noteiktiem nosacījumiem un tiek izmantoti reti. */

/* Atgriežamies HTML dokumentā un pierakstām iekš bloka: about elementus ar vairākiem klašu nosaukumiem, izmantojot BEM miks. */

/* Bet ir vēl veids kā vērsties pie CSS atribūtu selektora. Kad mums nepieciešams vērsties pie visiem, HTML dokumentā esošiem klases vai elementu nosaukumiem, mēs varam to pierakstīt šādi: */

[class*="body-about"] {
	color: #ff0000;
}

/* Redzam, ka atkal mainās sintakse. Mēs pierakstām: [class*="body-about"] { iekš iekavām rakstot CSS parametrus }. */

/* Izpildot katru piemēra pareizu pierakstu mēs redzam, ka mums vis darbojas, mainās iekš live server. */

/* Atgriežamies pie mūsu situācijas, kad mums ir divi konteineri - kastītes, kam tiek izmantoti vienādi CSS parametri. Mums tagad ir zināšanas kā mēs varam pie tām vērsties izmantojot CSS selektoru atribūtus. */

/* Mums ir divi varianti kā atrisināt mūsu situāciju izmantojot CSS atribūtu selektorus. Pirmais ir meklēt pēc nosaukuma beigām. Bet tas mums neder, jo, ja mēs pievienojam vēl kādu klases nosaukumu, izmantojam BEM miks, tad mums vis izjūk, nedarbojas. Pareizākais ir izmantot CSS atribūtu selektoru ar *, jo tad mēs vēršamies pie jeb kura nosaukuma, kas satur "" ierakstīto, pat tad, ja tam ir vairākas BEM klases, pat tad, ja tie ir BEM miks nosaukumi. */

/* Pareizākais šīs situācijas risinājums ir šāds: */

[class*="__container"] {
	max-width: 400px;
	margin: 0 auto;
}

/* Izpildot šādu pierakstu mēs redzam, ka mums vis darbojas. Esam visu izdarījuši pareizi. Pievienojam vēl kādu klases nosaukumu, lai pārliecinātos, ka pat tad vis darbojas. */

/* Šāda pieeja ir ļoti pareiza un mēs to varam izmantot, bet mums ir jāatceras viens būtisks mīnus šādai pieejai. Kad izmantojam CSS atribūtu selektoru ar vēršanos pie konkrēta vārda, izmantojam: *, mēs itkā to vārdu, nosaukumu rezervējam. Ja pēc mums ar lapu strādās kāds cits, kas nezin par šādu pieeju, tad var gadīties situācija, ka izstrādātājs kaut ko papildinās lapā, izmantos to pašu nosaukumu un tam tiks piemēroti attiecīgie CSS parametri. Var iegūt nevēlamu rezultātu. Piemēram iekš footer ielikt footer__container. Zinam, ka vārds: __container mums jau ir izmantots, un tas tiek rezervēts. Šādi var iegūt nevēlamu efektu. */

/* Bet protams, ja izstrādātājs pārlūkā atvērs dev tools, tad viņam uzreiz būs skaidrs kādēļ šādi noticis, un kas ir jādara - jāizlabo, lai nebūtu šāda situācija. Šis arī ir vienīgais šādas pieejas mīnuss. */

/* Šīs visas papildus zināšanas lapu izstrādē salīdzinoši ar pamatu zināšanām un principiem, kas mums jāievēro, ir sīkums. Mums jāatceras galvenie lapas izstrādes pamatprincipi: noturība, pieejamība, ērtums, ātrums. Tādēļ šīs papildus zināšanas nav tik svarīgas. */

/* Šo papildus zināšanu zināšana nenozīmē, ka mums tagad šie CSS atribūtu selektori ir visur jāizmanto. Tā tas nav. Mums tie ir jāizmanto tikai retos īpatnējos gadījumos, kā piemēram ar: __container un _icon, ja mums vajag kādam noteiktam nosaukumam pievienot kādu CSS parametru, tam pašam konkrētam elementam ar nosaukumu: _icon, mums vajag piemēram pievienot ikonu šriftu. */

/* Turpmāk iksevišķi tad, kad strādāsim ar lapas adaptīvu un starta šablonu, šī pieeja būs iekļauta. Tieši gadījums, kad mums vajag strādāt ar ierobežojošo kastīti: __container. */

/* Lapas pasūtītājam būs vienalga vai mēs esam izmantojuši šādu pieeju vai ne. Bet, ja mūsu lapa nonāk pie cita izstrādātāja, tad viņam ir jābūt minimālām zināšanām, kā piemēram: pārlūka dev tools, lai paskatītos kodu. Viņam uzreiz būs skaidrs no kurienes ir radušies konkrēts HTML elements - objekts, un kā, kādi CSS parametri tam ir piemēroti. */

/* Izmantojot šādu pieeju mēs ievērojam visus BEM metodoloģijas principus, ievērojam CSS selektoru principus. Mums nav nekādas nepareizības. Dotajā momentā šī pieeja ir pareiza un mums vajadzīga. Mums nav vairs nepieciešamības izdomāt kādas tehniskās klases vai ko tamlīdzīgu. */

/* Šodienas un nākošās dažas lekcijas būs vairāk saistītas ar radošumu. Mēs turpinām apgūt zināšanas par pozīcijām un apgūstam jaunu CSS parametru: transform. Paskatīsimies kā un kur tieši mēs to varam izmantot. */

/* Izveidojam priekš visa CSS selektora: body tumšāku fonu un iekš CSS selektora: wrapper nosakām iekšējo atstarpi. */

/* Izveidojam HTML dokumentā bloku. */

.block {
	background-color: rgba(73, 73, 72, 0.5);
	width: 200px;
	height: 200px;
	line-height: 20px;
	text-align: center;
	text-transform: uppercase;
	color: #fff;
}

.block__item {
	background-color: #7a957a;
	width: 200px;
	height: 200px;
}

/* Mēs izveidojam divus vienādus kvadrātus un redzam, ka zaļais kvadrāts aizsedz pelēko ( caurspīdīgo ) kvadrātu. Šādi mēs darām, lai labāk saprastu, kur bija konkrētais kvadrāts un kur tas nonāk, kad izmantojam tam CSS parametru: transform. */

/* CSS parametrs: transform ļauj mums vienlaicīgi pozicionēt elementus un transformēt. */

/* CSS parametrs: transform ļauj mums veikt 2D un 3D transformāciju ( pārvietot elementus ), griezt elementus, mainīt to izmērus un daudz ko citu. */

/* CSS parametra: transform vērtības mums būs neierastas. Pirmā vērtība ir: transform: translate(), kas ļauj mainīt elementa atrašanās vietu, no tā sākotnējās atrašanās vietas attiecīgi pa labi un uz leju, izmantojot koordinātas X un Y. Pa asi: X un asi: Y. Tā pieraksts ir: transform(x), transform(y). */

/* Ko mums atgādina CSS parametrs: transform. Tas mums atgādina CSS parametrus: position: relative kopā ar top un left vai right un bottom. */

/* Atceramies, ka CSS parametrs: position: absolute pozicionē objektu atkarībā no tā vecāka atrašanās vietas, bet CSS parametrs: position; relative pozicionē elementu - objektu atkarībā no tā atrašanās vietas. */

/* CSS parametrs: transform dara gandrīz to pašu ko CSS parametrs: position: relative, bet tas ir daudz plašāks, ar šo parametru mēs varam izdarīt daudz vairāk. */

/* Mēs pierakstot CSS parametra: transform: translate() iekavās rakstot x vai y liekam pārvietot elementu pa lapas horizontāli vai vertikāli. Kāda ir sintakse? Izskatām to ar piemēru. */

/* .block__item {
	transform: translate(50px, 0);
} */

/* Mēs redzam, ka zaļais kvadrāts nobīdās 50 pikseļus pa labi. Redzam, ka apakšā mums ir pelēkais ( caurspīdīgais ) kvadrāts. */

/* .block__item {
	transform: translate(50px, 50px);
} */

/* Mēs redzam vēl vienu līdzību ar CSS parametru: position, ka CSS parametrs: transform: translate neietekmē lapas apkārtni. Neietekmē citus lapas elementus. Par to mēs varam pārliecināties pierakstot to pašu izmantojot pozicionēšanu. Lai skaidri redzētu kā tas darbojas mums jāizslēdz iepriekšējie aktīvie kodi.*/

/* .block__item {
	position: relative;
	top: 50px;
	left: 50px;
} */

/* Mēs redzam, ka rezultāts ir viens un tas pats. Izslēdzam šo kodu un atgriežam atpakaļ iepriekšējos kodus. */

/* Iekš šī CSS parametra: transform: translate () iekavām mēs varam izmantot arī negatīvas vērtības, tādejādi panākot, ka elements nobīdīsies uz pretējo pusi. */

/* Kāda tad ir galvenā būtiskākā atšķirība starp CSS parametriem: position: relative un transform: translate? Pats svarīgākais tās ir % procentu vērtības. Paskatīsimies kā tās darbojās. */

/* Ja izmantojam CSS parametrus: position: relative ar procentu vērtībām mēs redzam, ka elements nobīdās ņemot vērā vecāka platumu un augstumu. Mūsu gadījumā tie ir 5% no vecāka platuma, no 200 px un vecāka augstuma, 5% no 200 px. */

/* Bet, ja mēs izmantojam % procentu vērtības iekš CSS parametra: transform: translate(), tad tie tiek ņemti no esošā objekta, nevis no tā vecāka. */

/* Šī ir būtiska atšķirība, kad % procenti tiek aprēķināti no paša elementa, nevis no vecāka. Nav neviena cita CSS parametra, kam arī būtu šāda iespēja. Tādēļ CSS parametrs: transform: translate ir tik unikāls. */

/* Tas mums sniedz kolosālas iespējas. Piemēram: mēs varam elementu, attiecīgi no tā augstuma nobīdīt uz leju pa 50%. Tas pats attiecās arī uz tā platumu, mēs varam nobīdīt to pa horizontāli pa 50%. */

/* Šī ir būtiska iespēja, jo, ja skatamies tālāk, kad mēs strādāsim ar lapas adaptīvu, mums visticamāk nebūs fiksētas augstuma un platuma vērtības, mums būs % vērtības. Šeit mums tieši ļoti labi der, ka iekš CSS parametra: transform: translate() mēs izmantojam % procentu vērtības, jo tās vienmēr tiks aprēķinātos no tekošā elementa platuma un augstuma. */

/* Paskatīsimies uz piemēriem kā mēs izmantojot divus CSS parametrus varam novietot zaļo kvadrātu centrā. Lai labāk redzētu rezultātu uz brīdi izslēdzam iepriekšējos aktīvos kodus. Izslēdzam pelēkajam kvadrātam platumu. */

/* .block {
	width: 100%;
	position: relative;
	height: 200px;
	background-color: rgba(73, 73, 72, 0.5);
} */

/* .block__item {
	background-color: #7a957a;
	height: 200px;
	width: 200px;
	position: absolute;
	top: 0;
	left: 50%;
	margin: 0 0 0 -100px;
	transform: translate(-50%, 0);
} */

/* Mēs redzam, ka zaļais kvadrāts pozicionējas nevis pa visas lapas platumu, bet gan no sava platuma mēģinot nostāties lapas centrā, bet tas īsti nedarbojas. Mēs to varam atrisināt izmantojot negatīvu vērtību ārējās atstarpes. Piemērojam tās uz mūsu piemēra. Mēs panākam, ka zaļais kvadrāts ir lapas centrā. */

/* Šādā gadījumā zaļais kvadrāts ir apsolūts un vienmēr centrā, bet mums jāsaprot, ka šeit mēs izmantojam konkrētus stingri noteiktus platumus. Ko līdz mums tie mainīsies, tā zaļā kvadrāta atrašanās vieta arī mainīsies un tas nebūs vairs pa vidu. Tādēļ šis nav labākais risinājums. */

/* Kā mēs varam vislabāk un pareizāk panākt mums vajadzīgo, lai zaļais kvadrāts vienmēr būtu lapas vidū. Mēs varam izmantot CSS parametru: transform: translate(). Pievienojam mūsu zaļajam kvadrātam CSS parametru: transform: translate(-50%, 0). Mēs iegūstam, ka mūsu zaļais kvadrāts vienmēr ir lapas centrā, pat tad, ja mainās tā platums. */

/* Ko un krā situācijā izmantot? Ja mums vajag elementu pozicionēt no vecāka platuma. To izvietot ņemot vērā tā vecāka platumu un augstumu, tad mēs izmantojam CSS pozicionēšanas parametrus. Ja mums vajag elementu pozicionēt attiecīgi paša elementa platumam un augstumam, tad vislabāk ir izmantot CSS parametru: transform; translate(). */

/* Ja mums vajag noteikt tikai vienu vērtību CSS parametram: transform: transition, tad mēs pierakstām šādi: transform: transitionX(50%) vai transform: transitionY(50%). Bet atceramies, ka tas ir tā pat kā ar atstarpēm. Mēs varam noteikt vienu konkrētu atstarpi vai divas, izmantojot divas kodu rindas jeb to pierakstīt vienā kodu rindā izmantojot universālo pierakstu. Tas atkarīgs kā mums ir ērtāk, saprotamāk. */

/* Atceramies, ka vislabāk vērtības noteikt izmantojot universālo pierakstu, jo tādejādi mēs ietaupām koda vietu. Ietaupam faila lielumu, atmiņu ko tas aizņem. */

/* Nākošā CSS parametra: transform vērtība ir: scale(1, 1), kas nosaka elementa - objekta lielumu. Pēc noklusējuma tam ir šādas vērtības: (1, 1). */

/* Šeit atkal tiek noteiktas vērtības pa lapas horizontāli un vertikāli. Bet, ja izmantosim tikai vienu vērtību, tad tā tiks piemērota gan pa lapas horizontāli, gan pa lapas vertikāli. Pa asi X un asi Y. */

/* Mainot CSS parametra: transform; scale() vērtības mēs redzam, ka tas neietekmē citus lapas elementus. Neietekmē lapas apkārtni. */

/* Vēlāk mēs mācīsimies kā ar CSS parametru: transform: scale() mēs varam izveidot animācijas. Bet tagad mums jāsaprot tā darbības pamati. */

/* Mēs vēl nemācamies par animācijām, bet paskatīsimies ar piemēru kā tas darbojās. Lai labāk saprastu kā tieši tas darbojās, izslēdzam iepriekšējos aktīvos kodus. Atgriežam sākotnējos CSS parametrus, kodu abiem kvadrātiem. */

/* Piemērs: */

/* .block__item {
	transform: scale(0);
	transition: all 0.3s ease 0s;
} */

/* .block:hover .block__item {
	transform: scale(1);
} */

/* Izpildot šo piemēru mēs redzam, kā mēs uzvedam ar peli uz pelēkā kvadrāta un mums parādās kā animācija zaļais kvadrāts. Mēs redzam cik plašas iespējas ir CSS parametram: transform. */

/* CSS parametrs: transform: scale() parasti tiek izmantots lai iegūtu kādu efektu, nevis lai pozicionētu kādu elementu. Priekš tam mums ir CSS pozicionēšanas parametri. */

/* Augstāk piemērā mēs redzam kā mēs varam izmantot CSS parametru: transform: scale(). */
/* Ja iepriekšējais CSS parametrs: transform: translate attiecās vairāk uz elementa atrašanās vietu - pozicionēšanu, tad šis CSS parametrs: transform: scale reti, kad tiek izmantots, lai mainītu elementa atrašanās vietu, jo tas tiek tieši izmantots lai radītu kādu efektu, animāciju. */

/* Vēl viena interesanta CSS parametra: transform vērtība ir: rotate, kas ļauj mums pagriezt elementus - objektus. Tā noklusējuma vērtība ir: transform: rotate(0deg). Mēs redzam, ka mums parādās jauna vērtība: deg, degree, kas nozīmē grādus, par cik grādiem elements pagriezīsies uz vienu vai otru pusi. */

/* Izskatām kā tas izskatās realitātē. Pievienojam šo CSS parametru mūsu piemēram. Lai redzētu kā tas darbojās izslēdzam iepriekšējo aktīvo kodu. */

/* .block__item {
	transform: rotate(45deg);
} */

/* Mēs redzam, kādas kolosālas lietas mēs varam paveikt izmantojot šo CSS parametru. Mēs liekam zaļajam kvadrātam pagriezties par 45 grādiem. Šo mēs varam panākt tikai izmantojot CSS parametru: transform: rotate(). Mēs šo pieeju varam izmantot, lai iegūtu kādu dizaina efektu, kas ir maketā, kā arī šo mēs varam izmantot, lai iegūtu animāciju, bet to mēs mācīsimies vēlāk. */

/* Šī CSS parametra: transform: rotate() vērtība ir grādi, kas pagriež elementu pulksteņa rādītāja virzienā, attiecīgi, ja vērtība ir negatīva, tad pretēji pulksteņa rādītāja virzienam. */

/* Ar šī CSS parametra: transform: rotate mēs varam elementu griezt arī tikai pa vienu asi - pa lapas horizontāli vai vertikāli. Bet tad mums ir jāraksta šādi: transform: rotateX(45deg) vai transform: rotateY(45deg). Elements tiks pagriezts tikai pa vienu pusi. Bet kā tas tieši darbojās mums varētu būt vēl grūti saprast. */

/* Lai mēs labāk saprastu kā tieši darbojās CSS parametrs: transform: rotate pa konkrētu pusi, izskatām to ar nelielu animācijas piemēru. Izslēdzam iepriekšējo aktīvo kodu. */

/* .block__item {
	transform: rotateY(0deg);
	transition: all 0.8s ease 0s;
}

.block:hover .block__item {
	transform: rotateY(0deg);
} */

/* Rezultātā mēs iegūstam animāciju, kad uzvedam ar peli uz pelēkā kvadrāta, mūsu zaļais kvadrāts kļūst lielāks un mazāks, precīzāk: tas saraujas un izstiepjas pa tā vertikāli. Atceramies, ka tas tiek noteikts ņemot vērā paša elementa - objekta augstumu, nevis vecāka. Šis CSS parametrs: transform: rotate() arī nekādi neietekmē citus lapas elementus, lapas apkārtni. */

/* Vizuāli mums šķiet, ka zaļais kvadrāts saraujas, bet faktiski tas griežas. Lai labāk saprastu kā darbojas CSS parametrs: transform: rotate() atgriežamies augstāk piemērā. Izslēdzam aktīvo kodu. Izmēģinām kā darbojās šīs CSS parametrs, kad nosakām, ka zaļais kvadrāts griežas pa 360 grādiem. */

/* .block__item {
	transform: rotate(0deg);
	transition: all 0.8s ease 0s;
}

.block:hover .block__item {
	transform: rotate(360deg);
} */

/* Izpildot šo piemēru, mēs redzam, ka mūsu zaļais kvadrāts griežas pulksteņa rādītāja virzienā pa 360 grādiem. Tas veic pilnu apli. Šāda pieeja realitātē tiek plaši izmantota lapu izstrādē, piemēram: lai pievienotu animāciju ikonām. */

/* Reizēm mums ir nepieciešams CSS parametru: transform: rotate() izmantot elementa pozicionēšanai. Gadījumos, kad mums pēc maketa ir nedaudz jāpagriež kāds elements. Mēs nevaram citādi to panākt izmantojot CSS pozicionēšanas parametrus. Šādos gadījumos mums ļoti noder šis CSS parametrs. */

/* Mums ir iespēja izmantot vairākas CSS parametra: transform: vērtības vienlaicīgi. Izskatīsim ar piemēru kā tas darbojas. Izslēdzam iepriekšējo aktīvo kodu. */

/* .block {
	overflow: hidden;
}

.block__item {
	transform: rotate(45deg) translate(-50%, 50%);
	transition: all 0.8s ease 0s;
} */

/* Mēs redzam, ka iegūstam interesantu vizuālo efektu, mums no kreisās puses no diviem kvadrātiem sanāk itkā aploksnīte. Šāda pieeja mums var noderēt, kad maketā ir kādi dizaina efekti un izmantojot CSS pozicionēšanas parametrus mēs nevaram panākt vēlamo rezultātu. Un šeit mēs redzam kā mēs varam izmantot CSS parametra: transform: vairākas vērtības vienlaicīgi. */

/* Svarīgi atcerēties, ka mums šinī gadījumā vecāka blokam ir jāpievieno CSS parametrs: overflow: hidden. Atceramies, ka tas nosaka vai elementa - objekta saturs izies ārpus tā vecāka robežām vai ne. Tam ir šādas vērtības: scroll, hidden, auto. */

/* Izskatīsim vēl vienu variantu, kad mēs varam izmantot CSS parametru: transform. Piemēram mums iekš zaļā kvadrāta ir teksts. Pievienojam mūsu piemēram sākumā CSS parametrus: line-height un text-align, text-transform un color.  Izslēdzam iepriekšējos aktīvos kodus. */

/* Mēs redzam, ka ar tekstu CSS parametrs: transform: rotate nedarbojas lai izveidotu animāciju, jo tas ir iekš kvadrāta un mums griežas vis zaļais kvadrāts. Vēlāk mēs vēl atgriezīsimies pie teksta un veidosim tam animāciju. */

/* Vēlviena unikāla CSS parametra transform: vērtība ir skew, kas ieliec, deformē elementu - objektu. Šai vērtībai mēs arī izmantojam divas vērtības() iekavās rakstot grādus. par cik grādiem mums jāieliec elements pa X asi vai Y asi, pa lapas horizontāli vai vertikāli. Mēs varam abas vērtības izmantot vienlaicīgi, kā arī varam tās rakstīt atsevišķi, pirms() liekot X vai Y. Kā arī mēs varam norādīt vienu vērtību, kas tiks pielietota gan pa X, gan Y asi, gan pa lapas horizontāli, gan pa lapas vertikāli. */

/* Visbiežāk tiek izmantota viena puse: X vai Y, lai panāktu kādu vizuālu efektu vai lai izveidotu animāciju. izskatām to ar piemēru. Noņemam: .block {} CSS parametru: overflow: hidden; Pievienojam jaunos parametrus šeit piemērā. */

.block__item {
	transform: skew(20deg);
}

/* Visbiežāk šis CSS parametrs: transform: skew() tiek izmantots norādot vienu vērtību. Tiek izmantota viena vērtība, lai ieliektu elementu gan pa asi X, gan pa asi Y. Izmantojot šādu pieeju mēs varam panākt vēlamo vizuālo efektu. */







