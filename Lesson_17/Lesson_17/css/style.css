
/* Sākumā atceramies kā pieslēgt šriftus: */

@import url("https://fonts.googleapis.com/css?family=Roboto:regular,500,700,900&display=swap");

/* @font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Regular.woff2") format("woff2"),
		url("../fonts/Gilroy-Regular.woff") format("woff");
	font-weight: normal;
	font-style: normal;
	font-display: swap;
}

@font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Bold.woff2") format("woff2"),
		url("../fonts/Gilroy-Bold.woff") format("woff");
	font-weight: bold;
	font-style: normal;
	font-display: swap;
} */

/* [class*="__container"] {
	max-width: 1050px;
	margin: 0 auto;
	padding: 0 15px;
	box-sizing: content-box;
} */

/* Mēs izmantojam šo klasi, lai ierobežotu saturu, lai tas nebūtu pārāk plats. */

/* Kādēļ mēs iekš __container mainām CSS parametru: box-sizing: content-box? Mēs to mainām, tādēļ, lai tajā netiktu ieskaitīts: padding: 15px. Lai tas neietekmētu: __container izmēru. Protams mēs varam vienkārši tos 30px pieskaitīt pie konteinera max-width un nemainīt box-sizing. Jo rezultāts būs identisks. Šeit varam izmantot jeb kuru no šiem variantiem, rezultāts nemainīsies. */

/* Ar content-box izmantošanu ir viena priekšrocība: ums nevajag neko rēķināt, mēs vienkārši pierakstām: box-sizing: content-box un vis, bet šie aprēķini nav tik grūti, lai tos nevarētu izdarīt. Mēs aprēķinot padding varam samazināt kodu pa vienu rindu. Tam gan nav lielas nozīmes. Šeit varam izvēlēties: darīt tā kā mums ir ērtāk. */

/* Paskatīsimies vēl uz dažiem forms piemēriem no iepriekšējās lekcijas. Atgriežamies HTML dokumentā un pierakstām struktūru. Atgriežamies šeit iekš CSS kaskādes tabulas stiliem un pievienojam nepieciešamos CSS parametrus. */

/*
.block {
	background-color: #7a956b;
	border-radius: 20px;
	padding: 30px;
}

.block__items {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
}

.block__item {
	flex: 1 1 calc(50% - 20px);
}

.block__input {
	width: 100%;
}

.block__textarea {
	resize: vertical;
	min-height: 150px;
} */

/* Pareizākais variants kā izstrādāt formas elementus - inputs ir: katru no tiem ielikt kastītē. Tādejādi mēs varam pēc tam ar tiem ērti rīkoties iekš CSS. */

/* Atsevišķos gadījumos var mēģināt izvairīties no papildus formu elementu: inputs un textarea ielikšanas kastītē. Bet tur ir savi mīnusi un lietas, kas ir jāņem vērā. Atgriežamies pie mūsu piemēra, gan iekš HTML, gan iekš CSS, paskatamies kā tas darbojas, un kādi CSS parametri mums ir jāizmanto, lai izvairītos no papildus kastītes. */

/* redzam, ka mums iekš textarea ir obligāti jāpievieno CSS parametri: resize un min-height. Gadījumā, ja mēs gribam iztikt bez papildus kastītes. */

/* Bet tas nav pareizākais variants. Visbiežāk visur formas elementi tiek ielikti kastītē. Bet pēc principa vai lapa paliek izturīga pret pārmaiņām, mēs varam izmantot šo metodi, jo tā ir gana uzticama - noturīga. */

/* Pierakstām formu ar papildus kastītēm, izskatām dažas svarīgas lietas. */

/* Šinī piemērā mēs izmantojam metodi: calc() ar procentiem un pikseļiem. Sākotnēji var šķist, ka vis ir labi, ka nav nekādu problēmu, bet brīdī, kad mums ir objekti ar dažādu saturu, šī pieeja vairs nedarbojas tā kā mēs būtu gribējuši. */

/* Izstrādājot lapā jebkādus elementus mums ir jāatceras, ka saturs var mainīties un šinī piemērā mēs to ļoti labi redzam, kad pievienojam dažāda lieluma tekstu. Mums vairs nedarbojas metode: calc(). */

/* Mums var gadīties neparedzamas lietas, ja elementiem mainīsies saturs. Šinī gadījumā mēs izskatījām piemēru, kur mums ir kartītes, un redzam, ka brīdī, kad mainās saturs, mūsu konstrukcija sāk sabrukt. */

/* Bet, kas attiecas uz formu, mūsu ievades lauki darbosies korekti. Bet, ja kaut nedaudz mainīsies elementu saturs, to uzvedība kļūst neparedzama, bet mums kā labiem lapas izstrādātājiem ir jāparedz visi varianti, kad lapas saturs, elementi var tikt visādi mainīti. */

/* Tādēļ šādai pieejai nav īpašu plusu. Tādēļ šo pieeju ar calc() izmantošanu flex elementiem mēs neizmantosim, jo tas ir neparedzami. */

/* Izskatīsim pareizāko šīs situācijas risinājumu. Mēs izmantosim katram form input atsevišķu kastīti - apvalku, lai mums nebūtu vajadzības izgudrot ko jaunu, kas konkrētās situācijās nedarbojas. */

/* Uz doto brīdi mums ir jāiemācās pareizi izmantot dotos instrumentus, netērējot laiku lai iedziļinātos jaunas izpildes variantos. */

/* Lai mums iepriekšējie aktīvie kodi netraucētu nākošajā tēmā, mēs tos izslēdzam. */

/* -------------------- */

/* Šīs lekcijas sākumā mēs mazliet atgriezāmies iepriekšējā lekcijā, bet tagad sākam jauno tēmu: lapas adaptīvs. */

.block {
	padding: 20px 0px;
	background-color: #794f45;
}

.block__items {
}

.block__item {
	background-color: #7a956b;
	padding: 10px;
	flex: 1 1 33.3333%;
	border: 1px solid #000;
	min-width: 150px;
}

/* Tātad, kas ir lapas adaptīvs? Kā radās nepieciešami pēc adaptīvām lapām. Agrāk nebija mazo un vidējo ekrānu, un nebija nepieciešams pēc lapas adaptīva. Bet mūsdienās vairs nav iedomājama neviena lapa, kurai nebūtu adaptīva. */

/* Sākumā bija tā saucamais: gumijas adaptīvs, kad visas fiksētās vērtības tikai nomainītas uz vērtībām ar procentiem. */

/* Agrāk visas lapas konstrukcijas tika bāzētas uz tabulām. Izskatām tabulas konstrukciju iekš mūsu HTML dokumenta. */

/* Mēs redzam, ka pēc tabulas konstrukcijas bija veselas lapas, kur bija lapas cepure, saturs un pagrabs. Šādi tika būvētas visas lapas, lielas un mazas. */

/* Agrāk, lai izstrādātu lapas pēc tabulu principa tika izmantots modulis: grid, kas lieliski darbojās kopā ar tabulām. Vēlāk mēs mācīsimies kā mūsdienās tiek izmantots modulis: grid. */

/* tabulām sāka izmantot adaptīvus lielumus izmantojot procentus, tādejādi iegūstot gumijas adaptīvu. */

/* Atceramies, kad mēs izmantojam procentu vērtības, tie tiek ņemti no tā vecāka elementa platuma. Vienīgais veids, kad procenti tiek ņemti no paša esošā objekta ir tad, kad izmantojam CSS parametru: transform: translate(). */

/* Sākotnēji, izmantojot gumijas adaptīvu, problēma ar mazākiem ekrāniem tika atrisināta, līdz brīdim, kad parādījās mobilie telefoni un planšetes. Tiem vairs nebija pietiekami ar gumijas tipa adaptīvu. */

/* Tā parādījās lapas mobilais adaptīvs. Mēs izstrādājam kādu objektu, kā mūsu piemērā augstāk, un mums vajag, lai tas ietilptu mazā ekrānā, planšetē vai mobilajā telefonā. */

/* Bija divu veidu lapas adaptīvu. Viens no tiem: mobilais adaptīvs. Izskatām to ar piemēru, izveidojot iekš HTML dokumenta vēl vienu piemēru. Pievienojam augstāk piemērā CSS parametrus. */

/* lapas izstrāde nekļuva adaptīva, bet gan parādījās atsevišķi izstrāde veidi, kur vienā failā ir kods priekš viena ekrāna lieluma, un otrā failā ir kods priekš maza ekrāna lieluma. Par to bija atbildīgi BackEnd speciālisti, kurā attiecīgā brīdī attēlot vienu vai otru variantu, jo nebija vēl lapas adaptīva izstrādes, bija vienkārši divas lapas versijas. */

/* Mūsdienās lapas adaptīvā izstrāde paredz to, ka elementi momentā pārkārtojas no viena stāvokļa uz citu stāvokli. */

/* Izslēdzam iepriekšējos kopētā mob bloka kodus un izskatām adaptīvu izstrādi ar piemēru. */

/* Mēs nosakām dažādus CSS parametrus, liekot mūsu blaka saturam zibenīgi pārkārtoties, kad mainās ekrāna lielums. */

/* Ja skatamies uz lapas adaptīvu, mums ir jādomā kā māksliniekiem, kur kā novietot elementus, lai tas būtu ne tikai pareizi, bet arī skaisti, lai lietotājam būtu patīkami atrasties mūsu lapā. Lapas adaptīva izstrādē mums nepietiek tikai ar teorijas zināšanu, mums ir jābūt kā māksliniekiem. */

/* Iekš google chrome izstrādātāja rīkiem mums ir iespēja mainīt mūsu lapas laukumu, redzamo daļu, kas saucas viewport. Jauns termins, kas mums ir jāzin. Iekš šī rīka mēs varam uzlikt mums vajadzīgo ekrāna laukumu - lapas laukumu, lai ērtāk sekotu rezultātam un saprastu kurā brīdī mums ir jāmaina elementu uzvedība, lai tie būtu pēc iespējas labāk redzami, apskatāmi. */

/* Mēs jau esam dzirdējuši par noteiktiem lapas lielumiem, kuros mums kas ir jāmaina. Par tiem mums ir Jāaizmirst. Jo kā redzam pēc chrome izstrādātāja rīka, tur ir daudz iespējamās ierīces, ar dažāda platuma viewport. Bet, ja mēs ņemsim kādus noteiktus lielumus, tad mēs zaudējam savu iespēju būt māksliniekiem. */

/* Bet tomēr ir daži lielumi, kuri mums ir jāzin, un pie kuriem, mums ir jāmaina lapas elementu attēlojums. Bet mums tie ir jāievēro nosacīti. Vairāk jāzin par tiem, bet ne vienmēr jāizmanto. katrai situācijai mums ir jāpieiet individuāli, kā jau māksliniekiem. */

/* Tagad, pēc šīs lekcijas, rakstot katru koda rindu, mums ir jādomā, kas notiks, kā izskatīsies mūsu lapa, kad ekrāns kļūs mazāks, mazākā ierīcē. */

/* Lapas gumijas adaptīvs nozīmē, to, ka lielumu, platuma un augstuma vērtības nav fiksētas, bet tās ir norādītas procentos, kas nozīmē to, ka mainoties ekrāna lielumam lapas elementi attiecīgi saraujas, pielāgojas ekrāna - viewport lielumam. */

/* Reizēm var gadīties situācija, kad mums ir nepieciešams aizliegt lietotājam palielināt lapu. Lai to izdarītu, mums iekš tehniskā tega: <meta> jāieraksta īpaši norādījumi, īpaši atribūti un to vērtības. Par tiem mēs varam izlasīt internetā. Tas tiek izmantots ļoti reti, un mums šobrīd tas nav nepieciešams. */

/* Pie specifiskiem projektiem mums var būt situācija, kad jāizmanto fiksētais adaptīvs. Kad lapas satura nav daudz, lai uz jebkura ekrāna parādītos vis lapas saturs tāds kā tas ir pilnā izmērā, tikai mazāks, mums jāmaina iekš tehniskā HTML dokumenta meta tega atribūta content vērtība. Mums jāieraksta: width=1050. Pārējais jānoņem. Un iekš CSS reset faila selektora: body jānorāda tas pats platums, tikai adaptīvs: parametrs: min-width: 1050px. Šāda pieeja var noderēt, piemēram: admin lapas izstrādē. */

/* Šī ir fiksētā lapas izstrāde, kad mainoties ekrāna platumam mēs redzam visu lapas saturu tādu, kāds tas ir bijis sākotnēji. Mēs redzam veselu lapu. Reizēm pēc specifiska tehniskā uzdevuma, tiek izmantota šī pieeja. */

/* Gumijas veida lapas izstrāde, kad mēs izmantojam procentu vērtības. Lapa kļūst atsaucīga. Mainoties ekrāna platumam mainās visi elementu platumi. Lai tas notiktu, visos lielumos jāizmanto adaptīvas vērtības, lai lapa kļūtu atsaucīga. Lai tā stieptos un sarautos kā gumija. */

/* Šie lapu adaptīvu veidi tika izmantoti sākotnēji. Bet mūsdienās tie tiek reti izmantoti, jo ar tiem vairs nepietiek. Tagad tiek izmantota atsaucīgā un adaptīvā lapu izstrāde. SĪe abi veidi praktiski ne ar ko neatšķiras. Vienīgā atšķirība, kas ir: izstrādes veids, dažādas pieejas pie izstrādes. Visbiežāk tiek izmantota tieši adaptīvā pieeja, kad izmantojam: breakpoints: liekam mainīties lapas elementiem pie noteikta ekrāna - lapas viewport lieluma. */

/* Šī pieeja: adaptīvā lapu izstrāde paredz to, ka tad, kad kāds lapas elements neietilps noteiktā ekrāna platumā, vai vienkārši: elements slikti izskatās noteiktā lapas platumā, mēs izmantojam: breakpoints, kas nozīmē ka: mēs nosakām konkrētu platumu pie kura mainīsies noteiktu elementu uzvedība. */

/* Kā tad īsti darbojas breakpoints - laušanas punkti. Izskatām to ar piemēru. Izmantojam tos pašus elementus, kas mums jau ir HTML dokumentā. */

/* @media (max-width: 1109.98px) {
	.block__items {
		flex-wrap: wrap;
	}
	.block__item {
		background-color: #77608d;
		padding: 10px;
	}
} */


/* Mēs izmantojam jaunu metodi: @media () iekavās rakstām: max-width: 1110px, atveram {} iekavas, kurās rakstam attiecīgos CSS parametrus. */

/* Lai mums būtu vieglāk saprast, kā darbojas metode: @media, izmantojam programmēšanu. Tie ir kā nosacījumi, piemēram: ja lapas platums ir 1110px, tad notiek tas un tas. */

/* Visbiežāk tiek izmantota pieeja, kad lapa tiek izstrādāta sākotnēji datora versijā, un tad pakāpeniski tiek samazināts ekrāns līdz tiek iegūts mobilā telefona ekrāna platums. No pc izstrādes uz mobile izstrādi. Tiek iets no lielākā platuma uz mazāko. */

/* Bet reizēm tehniskais uzdevums paredz to, ka vispirms tiek izstrādāta mobile versija un pēc tam lapas pc versija, no mazākā ekrāna platuma pāriet uz lielāko ekrāna platumu, uz pc. */

/* Izmantojot iekš metodes: @media () iekavām: max-width: 1110px, mēs nosakām: ne lielāks vai vienāds ar: 1110px jeb: mazāks vai vienāds ar: 1110px. */

/* Iekš metodes: @media {} iekavām mēs rakstam selektora nosaukumu, kuram gribam ko noteikt, liekam atkal {} iekavas, kurās rakstam atbilstoši situācijai nepieciešamos CSS parametrus. */

/* Ievērojam tādu pieraksta sintaksi kā augstāk piemērā: */

/* Konkrētajā piemērā, mēs liekam flex elementiem, mainoties ekrāna platumam pāriet jaunā rindā. Mēs to varējām noteikt uzreiz, un tas arī būtu pareizi. Bet mēs izskatījām vienkārši ar piemēru, lai sapratu breakpoints pieraksta sintaksi. */

/* Iekš breakpoints mēs varam izmantot visus CSS parametrus, mainīt krāsu, lielumu, formu utt. */

/* Reizēm mums var noderēt neapaļas vērtības. Kad iekš metodes: @media () iekavām iekš: max-width: mēs norādām neapaļu vērtību, piemēram: max-width: 1109.5px. */

/* Svarīgi atcerēties. Mēs varam izmantot arī neapaļas vērtības. Šī pieeja ir svarīga, ja izstrādājam lapu priekš Apple ierīcēm. Ipad un iPhone. */

/* Strādājot ar lapas adaptīvu ir trīs standarta ekrāna platumi, klēpjdatoram, planšetei un mobilajam telefonam. Bet mums ir jāievēro konkrēts skaitlis aiz veselā skaitļa, lai vis darbotos korekti. Tā ir datoru un Apple tehnikas īpatnība. Kā šinī piemērā: */

/* @media (max-width: 767.98px) {

} */

/* Konkrētais lielums ir paredzēts lai izmantotu lapu uz planšetdatora. */

/* Lapu izstrādē ir noteikti ekrānu lielumi. Tie ir lielie ekrāni, lielāki par 1440px. Mazi ekrāni: ne mazāk nekā: 1024px. Planšetes: mazāki nekā: 1024px, bet ne mazāki kā: 768px. Mobilās ierīces: mazāk nekā 768px. */

/* Mūsdienās planšetes, telefoni kļūst ar vien lielāki, ar lielākiem ekrāniem. Jāņem vērā, ka tagad ir planšetes, kur ekrāna lielums ir vairāk nekā 1366px, ja to pagriež horizontāli. */

/* Šis ir vispārpieņemtais ekrānu sadalījums, tā saucamais siets. Šos ekrānu lielumus ir jāzin, bet izstrādājot lapas adaptīvu tie nav vienmēr jāievēro, jo šos lielumus mēs varam noteikt paši attiecīgi situācijai, izmantojot chrome izstrādātāju rīku, kur varam simulēt jebkādu ekrāna - lapas viewport lielumu. */

/* Dizaineri, kad zīmē lapu, ievēro noteiktus lielumus, jo viņi nevar uzzīmēt bezgalīgi platu lapu. Bet mums izstrādātājiem ir jāievēro, tas, ka izstrādājot lapu, lapas fonu mēs neierobežojam, ļaujam tam būt pa visu ekrāna platumu, neatkarībā no ekrāna lieluma. */

/* Mums ir svarīgi ierobežot tikai lapas saturu. izmantojot noteiktu lielumu konteinerus - kastītes. Lai lapas saturs būtu vieglāk uztverams un lasāms. Mums vienmēr ir jāierobežo lapas saturs, tā kā norādīts maketā, bet lapas fonam atļaujam stiepties pa visu ekrānu. */

/* Mums ir stingri jāievēro, ka lapas saturu mēs ierobežojam atbilstoši maketā norādītajam platumam, izmantojot katram blokam ierobežojošo konteineru, bet fonam, krāsai, bildēm, atļaujam būt pa visu viewport platumu. */

/* Kad izmantojam satura ierobežojošo konteineru svarīgi ir norādīt pa sāniem drošības atstarpi, iekšējo atstarpi. Agrāk tā bija: 10px, bet tagad ir pieņemts, ka norādām: 15px. Atceramies, ja norādām iekšējās atstarpes, mums ir attiecīgi jāpalielina konteinera lielums, lai lapa atbilstu maketam. */

/* Izstrādājot lapas adaptīvu mēs pēc nepieciešamības varam samazināt arī lapas satura ierobežojošo konteineru. Rakstot CSS failu mēs uzreiz aiz konteinera parametriem pierakstām metodi: @media () iekavās norādot nepieciešamo konteinera platumu. Tā kā piemērā: */

/* @media (max-width: 1050px) {
	[class*="__container"] {
		max-width: 970px;
	}
}

@media (max-width: 991.98px) {
	[class*="__container"] {
		max-width: 750px;
	}
}

@media (max-width: 767.98px) {
	[class*="__container"] {
		max-width: none;
	}
} */

/* Šie trīs lūzuma punkti ir visvienkāršākais lapas adaptīva siets, kur mēs izstrādājam lapas adaptīvu trīs klasiskos ekrāna lielumos. Šī saucās: visvienkāršākā lapas adaptīva izstrāde. */

/* Tā pamazām pārejam no lielākā ekrāna lieluma uz mazāko. Pierakstām nākošo konteinera lielumu. */

/* Pirmais lūzuma punkts: breakpoint atkarībā no maketa mums būs citādāks, bet pārējie divi mums ir jānosaka vienādi. Bet tas nenozīmē, ka mums nevar būt vēl citi lūzuma punkti. */

/* Šī pieeja, kad izmantojam trīs standarta lūzuma punktus tiek saukta par lēto lapas adaptīvu. */

/* Pirmais lūzuma punkts ir datora ekrāns, ko mēs ņemam no konkrēta maketa, otrs ir nosacīts planšetes lielums un trešais ir nosacīts mobilā telefona lielums. */

/* Šī ir tehniskā lapas adaptīva izstrādes daļa, bet vēl ir arī mākslinieciskā lapas adaptīva izstrādes daļa, kur mēs vairs nepieturamies pie noteiktiem teorijā lūzuma punktiem: breakpoints. */

/* Bet lapas tehniskajai adaptīva daļai ir savas nianses. Atceramies, ka lūzuma punkti ir kā nosacījumi. Ja ekrāns ir, tad... Mēs izskatījām vienkāršākos nosacījumus, bet tagad paskatīsimies uz sarežģītākiem nosacījumiem, piemēram: */

/* @media (max-width: 767.98px) and (min-width: 479.98px) {
	.block__item {
		background-color: #77608d;
		padding: 20px;
	}
} */

/* Šeit ir uzrakstīts nosacījums: ja ekrāns ir mazāks par 767.98px, bet lielāks par 479.98px, tad... mainām fona krāsu, pievienojam iekšējās atstarpes. */

/* Parasti tiek izmantoti vienkārši nosacījumi, izmantojot vienu lūzuma punktu, bet retās situācijās mums var noderēt sarežģītie nosacījumi, kur izmantojam divus lūzuma punktus vienlaicīgi. Šī nianse ir papildus zināšanas, bet vienkāršie lūzuma punkti ir fundamentālas lapas adaptīva izstrādes zināšanas. */

/* Tika jau minēts, ka ir mobilā lapas adaptīva izstrāde. Tā saucas: mobile first, kur tiek izstrādāta lapa sākotnēji priekš mobilajām ierīcēm, un tad izmantojot lūzuma punktus pāriet no mazākā uz lielāko ekrānu, līdz nonāk pie datora versijas izstrādes. */

/* Kādēļ tiek izmantota mobile first lapu izstrāde? Tādēļ, ka izstrādājot mobile first versiju tiek pierakstītas mazāk koda rindas, iekš CSS faila un HTML, jo mobilajā versijā ir mazāk elementi, satura, līdz ar ko arī CSS failā tiek rakstīts īsāks kods. */

/* Datora versijas lapas adaptīva izstrādē mēs esam pieraduši iet no lielākā uz mazāko ekrānu. Mēs izmantojam: max-width: parametru. Bet, kad izstrādājam mobile first lapu, tad mēs izmantojam parametru: min-width. */

/* Izskatām vēl piemērus. Mēs pie noteikta lūzuma punkta: 767.98px nosakām, ka mūsu flex konteineris kļūst par bloku, tā kā piemērā: */

/* @media (max-width: 767.98px) {
	.block__items {
		display: block;
	}
} */

/* Kā mēs darītu, ja vajadzētu izstrādāt vispirms mobile first lapas versiju? Mēs vēlamies, lai uz mobilās ierīces mums būtu flex elementi. Mēs rakstām šādi: */

/* @media (min-width: 767.98px) {
	.block__items {
		display: flex;
	}
} */

/* Atceramies: Ja mēs izstrādājam sākotnēji lapas mobile first versiju, mums ir mazāk koda rindas. Un tas ir galvenais iemesls kādēļ bieži var sastapt tehniskajā uzdevumā prasību, ka vispirms tiek izstrādāta mobile first lapas versija. Otrs, mazāk būtisks iemesls ir: ja mums ir mazāk koda rindas, tad lapa ielādējās ātrāk. */

/* Jau tagad mums ir pietiekami daudz zināšanu, lai izstrādātu jebkuras lapas adaptīva versiju. Svarīgākais: mums ir jāattīsta mākslinieciskā puse, jāspēj saskatīt lapā, kuri elementi izskatās labi, bet pie kuriem ir jāpiestrādā, lai tie arī izskatītos labi. Lai gala rezultātā visa lapa samazinoties ekrānam visās ierīcēs izskatītos vienādi skaisti. */

/* Sākumā, mums ir ieskaitot konteineru četri lūzuma punkti, un mums jau ir pietiekami, bet šāda lapas adaptīva izstrāde ir lēta, jo tai nav pielikta mākslinieciskā puse. */

/* Ir vēl viens lapas adaptīva izstrādes veids: atsaucīgais lapas adaptīvs. Tas ir tad, kad mēs izmantojam parasto lapas adaptīva izstrādi ar lūzuma punktiem un pieliekam klāt gumijas lapas adaptīva izstrādi. Mēs šos abus veidus krustojam, kā rezultātā sanāk: atsaucīgā lapas adaptīva izstrāde. */

/* Atsaucīgais lapas adaptīvs ir augstākais lapas adaptīva izstrādes līmenis, kas tiek novērtēts visaugstāk. Šāds adaptīvs vairs nav lētais lapas adaptīvs. Protams, tas ir arī pats sarežģītākais lapas adaptīvs. */

/* Atsaucīgā lapas adaptīva izstrāde paredz to, ka mēs neizmantojam priekš ierobežojošā konteinera lūzuma punktus. Mēs neizmantojam uzreiz stingri noteikto sietu ar trīs lūzuma punktiem, bet mēs izmantojam konkrētus lūzuma punktus tikai tad, kad tas ir nepieciešams. */

/* Sarežģītajā, dārgajā lapas adaptīva izstrādē: atsaucīgais lapas adaptīvs, mēs izmantojot izstrādātāja rīku, skatamies kurā brīdī mums rodas problēma ar lapas satura attēlošanu. Mēs ieslēdzam pielāgoto lapas adaptīvu un ik pa pāris pikseļiem vērojam kā izskatās lapas saturs. */

/* Lai labāk saprastu kā tas darbojas mēs iekš HTML dokumenta, iekš flex elementiem pievienojam tekstu. Atveram izstrādātāja rīku un sākam samazināt ekrānu līdz redzam, kurā vietā, kādā ekrāna platumā - ierīces viewport mums sākas problēma: teksts vairs nav īsti salasāms. Sākotnēji mums darbojas lapas gumijas adaptīvs. */

/* Šeit arī parādās dārgais lapas adaptīvs. Kad mēs paši, neizmantojot tehniski zināmo sietu ar konkrētiem lūzuma punktiem, skatamies paši un izlemjam paši kurā brīdī jāizmanto konkrēts lūzuma punkts un jāsāk mainīt lapas elementu uzvedība. Šis arī ir tas brīdis, kad kļūstam mākslinieki. */

/* Mēs neņemam vērā mūsu zināmo tehnisko daļu, sietu ar trīs noteiktiem lūzuma punktiem, mēs ņemam vērā to, ko redzam paši savām acīm. */

/* Dotajā piemērā, mēs samazinām ierīces viewport un redzam, ka mums ir jāveic elementu pārkārtojums pie 540px. Izmantojam mobile first pieeju ar min-width izmantošanu. Pierakstām: */

@media (min-width: 540px) {
	.block__items {
		display: flex;
	}
}

/* Reizēm ir nepieciešams izstrādāt lapu bez ierobežojošā konteinera izmantošanas. Bet visbiežāk mūsdienās, kad ekrāni kļūst ar vien lielāki, tomēr tiek izmantots ierobežojošais konteineris. Bet mēs izskatīsim piemēru, kad tas tiek izmantots tikai lai noteiktu iekšējās atstarpes. */

[class*="__container"] {
	padding: 0px 30px;
}

/* Redzam, ka sākotnējā, lielā ekrānā lapas elementi izskatās labi. Samazinām ekrānu līdz 1000px un redzam, ka tagad iekšējās malu atstarpes ir par lielu, labojam to: */

@media (max-width: 1000px) {
	[class*="__container"] {
		padding: 0px 20px;
	}
}

/* Šeit arī mēs saprotam kā strādā atsaucīgā lapas adaptīva izstrāde. Mēs skatamies, samazinam viewport un ar savu aci vērtējam kurā brīdī mums ir kas jāmaina. Šī arī ir atsaucīgā lapas adaptīva izstrāde. */

/*  */


