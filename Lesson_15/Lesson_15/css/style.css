
/* Sākumā atceramies kā pieslēgt šriftus: */

@import url("https://fonts.googleapis.com/css?family=Roboto:regular,500,700,900&display=swap");

/* @font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Regular.woff2") format("woff2"),
		url("../fonts/Gilroy-Regular.woff") format("woff");
	font-weight: normal;
	font-style: normal;
	font-display: swap;
}

@font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Bold.woff2") format("woff2"),
		url("../fonts/Gilroy-Bold.woff") format("woff");
	font-weight: bold;
	font-style: normal;
	font-display: swap;
} */

body {
	font-size: 16px;
	font-weight: 400;
	background-color: #f5f5f5;
}

/* Šinī lekcijā mēs turpināsim iepriekšējās lekcijas tēmu. Strādāsim ar moduli flex. Iepriekšējā lekcijā mēs saņēmām visu teoriju, kas mums ir jāzin, bet šinī lekcijā izskatīsi, flex moduli praktiski, ar praktiskiem piemēriem, lai labāk saprastu kā tas darbojas. */

/* Šī lekcija nebūs gluži meistarklase, kas būs vēlāk kursā, bet šeit mēs izskatīsim no reāliem piemēriem, no mūsu maketiem kā mēs varam tos izstrādāt, izmantojot flex moduli. */

/* Mēs mācāmies jau tagad pareizi strādāt ar klasēm, rakstīt tās pēc BEM metodoloģijas. Izmantot ierobežojošās kastītes: __container. Vēršoties pie tām izmantojot sarežģītos klašu selektoru atribūtus. */

[class*="__container"] {
	max-width: 1050px;
	margin: 0 auto;
	padding: 0 15px;
	/* box-sizing: content-box; */
}

/* Mēs izmantojam šo klasi, lai ierobežotu saturu, lai tas nebūtu pārāk plats. */

/* Izslēdzam tumšo fonu iekš CSS, lai mēs labāk redzētu rezultātu. */

/* Kādēļ mēs iekš __container mainām CSS parametru: box-sizing: content-box? Mēs to mainām, tādēļ, lai tajā netiktu ieskaitīts: padding: 15px. Lai tas neietekmētu: __container izmēru. Protams mēs varam vienkārši tos 30px pieskaitīt pie konteinera max-width un nemainīt box-sizing. Jo rezultāts būs identisks. Šeit varam izmantot jeb kuru no šiem variantiem, rezultāts nemainīsies. */

/* Ar content-box izmantošanu ir viena priekšrocība: ums nevajag neko rēķināt, mēs vienkārši pierakstām: box-sizing: content-box un vis, bet šie aprēķini nav tik grūti, lai tos nevarētu izdarīt. Mēs aprēķinot padding varam samazināt kodu pa vienu rindu. Tam gan nav lielas nozīmes. Šeit varam izvēlēties: darīt tā kā mums ir ērtāk. */

/* Izskatīsim kā mēs varam lapas apakšu - pagrabu piespiest pie apakšas. Tas ir pagaidām mums nesaprotama lieta, ko daudzi iesācēji nezin. Ierakstām iekš tegiem header un footer atbilstošu tekstu, iekš HTML dokumenta. Mēs vēršamies pie mūsu nulles stilu faila, pie tega: wrapper un ieslēdzam tam flex moduli un pagriežam to tā, lai tas būtu kolonnā uz leju. Un mēs vēršamies pie tega main un pierakstām: flex: 1 1 auto, kas lapas augšu piespiedīs pie augšas, bet lapas apakšu piespiež pie lapas apakšas. Izskatīsim to ar piemēru: */

.wrapper {
	min-height: 100%;
	overflow: hidden;
	display: flex;
	flex-direction: column;
}

.main {
	flex: 1 1 auto;
	/* flex-grow: 1; */
}

/* izmantojot šādu pierakstu mēs iegūstam vēlamo rezultātu. Šāda pieeja mums var noderēt, tad, kad mums lapā saturs ir maz, un mēs uzreiz nosakām, ka lapas pagrabs būs piespiests pie lapas apakšas, lai tas mums nekarājās gaisā. */

/* Tik pat labi mēs varam pierakstīt iekš main flex elementu parametru: flex-grow: 1, jo pārējie parametri jau pēc noklusējuma ir ar tādām vērtībām kā mēs norādījām. Bet, lai mēs labāk saprastu kā kura vērtība darbojas mēs varam lietot universālo: flex pierakstu. */

/* Šādu pieeju, kad mēs kādu elementu pielipinam pie apakšas, mēs varam izmantot mūsu lapas izstrādē, kad mums ir kādas kartiņas un mums vajag kādu kartiņas elementu piespiest pie apakšas. Tad arī mēs varam izmantot šādu nelielu viltību. Šīs sīkās nianses, ko mēs izmantojam lapu izstrādē nosaka cik profesionāli mēs esam. Šo sīko nianšu zināšana padara mūs par profesionāļiem. */

/* Izveidojam HTML dokumentā virsrakstu struktūru, atgriežamies šeit un stilizējam mūsu virsrakstus. */

/* Pieslēdzam mūsu CSS failā roboto šriftu. */

.header,
.footer {
	background-color: #794f45;
	padding: 15px;
}

.promise {
	padding: 50px 0px;
}

.promise__header {
	margin: 0px 0px 68px 0px;
}

.title *:not(:last-child) {
	margin: 0px 0px 33px 0px;
}

.title__label {
	background: url("../img/dog_page/icons/icon_promises.svg") 0 -2px no-repeat;
	color: #5d62b5;
	padding: 0px 0px 0px 35px;
	font-size: 12px;
	font-weight: 700;
	letter-spacing: 2.5px;
	line-height: 2;
	text-transform: uppercase;
}

.title__item {
	font-size: 36px;
	font-weight: 900;
	color: #000;
	line-height: 1.16;
}

/* CSS parametru: line-height mēs norādām procentos, jo, kad strādāsim ar lapas adaptīvu, ja mainīsies CSS parametrs: font-size, tad automātiski mainīsies CSS parametrs: line-height, tādēļ jau tagad mums ir jāpierod to norādīt procentos. */

/* Turpinām mūsu piemēru iekš HTML dokumenta izstrādājot vienas kartiņas struktūru. Izlemjam, ka katrai kartītei mēs netaisīsim atsevišķu čaulīti, jo tas nav nepieciešams, jo mums nav katrai kartītei jāizstrādā CSS parametrs: background, jo fons šeit visam objektam, kas satur trīs kartītes ir vienāds. Turpinām strādāt ar mūsu piemēru piemērojot tam kaskādes stilus. */

.promise__items {
	display: flex;
	margin: 0px -12px;
	flex-wrap: wrap;
	row-gap: 24px;
	/* justify-content: space-between; */
}

.promise__item {
	flex: 0 1 33.333%;
	padding: 0px 12px;
	min-width: 260px;
	/* max-width: 324px; */
	/* flex: 0 1 324px; */
}

.item-promise {
	display: flex;
	align-items: flex-start;
	column-gap: 23px;
}

.item-promise__img {
	flex: 0 0 63px;
}

.item-promise__body {

}

.item-title {
	font-weight: 900;
	font-size: 19px;
	color: #f2726f;
	line-height: 1.37;
}

.item-promise__title:not(:last-child) {
	margin: 0px 0px 20px 0px;
}

.item-text {
	line-height: 1.5;
}

/* Pievienojam HTML dokumentā atlikušās divas kartītes.Mēs redzam, ka esam ieguvuši vēlamo rezultātu, bet ir viens sīkums: mums starp flex elementiem nav atstarpes, pievienojam tās. Izmantojam CSS parametrus: margin un padding. Nosakām margin: 0 -12px mūsu flex konteineram: promise__items un nosakām padding priekš: promise__item. */

/* Mēs izmantojam: padding, lai kompensētu negatīvās atstarpes: margin, ko izmantojām flex konteineram. Vis ir itkā labi, bet situācijā, kad tiek noņemta bilde - attēls, mums flex elements vairs neizskatās tik labi. Tādēļ nodrošināmies pret satura izmaiņām noņemot CSS parametru: padding no item-promise__body: un pievienojot CSS parametru: column-gap mūsu flex konteinerim. */

/* Šī ir pieeja, kad mēs nodrošinām maksimāli noturīgu lapas izstrādi pret pārmaiņām, un neizmantojām papildus kastītes mūsu flex elementiem. Mēs atrisinājām uzdevuma ar minimāla apjoma kodu. */

/* Otrs variants, ko itkā varētu izmantot, lai nebūtu jāizmanto margin un padding, lai noteiktu flex elementiem atstarpes ir: mēs izmantojam flex moduļa parametru: justify-content: space-between un max-width; 324px; Bet tas mums īsti neder, jo, kad mainās flex konteinera platums flex elementi saplūst kopā un starp tiem vairs nav atstarpes. Tādēļ šāda pieeja mums neder. Ja skatamies uz priekšu, ka lapai būs adaptīvs. */

/* Vēl viens variants, kas arī itkā derētu, bet atkal domājot par lapas adaptīvu, samazinoties flex konteinerim: mums tas tomēr neder, jo iegūstam nevēlamu efektu. Mēs izmantojam flex konteinera parametru: gap un flex: 0 1 324px un flex-wrap: wrap. Šis arī nav labākais variants kā atrisināt uzdevumu. Pirmais variants ar padding un negatīvu margin izmantošanu ir vislabākais un visdrošākais mūsu lapai. */

/* Pagaidām mums ir trīs kartītes, bet, ja kartītes paliks vairāk, tad mums ir jāpievieno tikai padding: 24px un negatīva margin, un mēs iegūstam, ka mēs varam ātri izveidot jaunas kartīšu rindas. */

/* Ja mums šķiet sarežģīti strādāt ar atstarpēm, mēs varam vienkārši flex konteineram izmantot: row-gap: 24px; Mēs iegūsim tieši tādu pašu rezultātu. */

/* Ja mēs vēlamies, lai mums notiktu automātiska flex elementu pārnese jaunā rindā, kad mums mainās flex konteinera platums, mēs mūsu flex elementiem varam izmantot CSS parametru: min-width: 260px. */

/* Mums ir jāsaprot, ka flex modulim ir ļoti plašas iespējas, mēs varam mainīt katru parametru un katru reizi panākt interesantus efektus. Vis ir atkarīgs no konkrētas situācijas, konkrēta uzdevuma. Mums ir jāsaprot, ka katrai situācijai pieejai jābūt savādākai. Šai situācijai pieeja ir šāda, bet citā situācijā mums būtu jādara vis savādāk. */

/* Domājot par lapas adaptīvo, ko mēs vēl nezinam, neprotam, mēs jau tagad iekš flex elementiem jau tagad varam norādīt parametru: flex: 1 1 33.333%;, tādā veidā jau tagad mūsu lapa ir adaptīva. */

/* Turpinām strādāt tālāk, izskatām nākošo maketa bloku: services. Izstrādājam HTML dokumentā bloka services struktūru. Šeit jau mēs izmantojam citu pieeju, mēs mūsu kartītes saturu un ikonu liekam katru atsevišķā kastītē - <div></div> atvilknē. Jo ikonas var būt dažāda augstuma, tādēļ mums jānodrošinās, ka varam piekļūt klāt ikonai un strādāt ar to. Kā arī: mums jānodrošinās ar papildus kastīti katras kartiņas saturam, jo mums katrai kartītei ir fons, un, ja mēs gribam izmantot % lielumus kartītēm un atstarpes starp tām, tad mums ir jādara tieši šādi. */

/* Mums zem mūsu kartītēm ir poga. Šinī piemērā mēs izskatīsim variantu kā mēs varam izstrādāt pogu izmantojot moduli: flex. */

/* Kad esam izstrādājuši HTML dokumentā struktūru, atgriežamies šeit un pievienojam kaskādes stilus mūsu elementiem. */


.services {
	padding: 100px 0px 112px;
	position: relative;
	overflow: hidden;
}

.services::before {
	content: "";
	position: absolute;
	background: url("../img/dog_page/services/blob_2.png") left -490px no-repeat;
	left: 50%;
	transform: translate(180px, 0px);
	top: 0;
	width: 100%;
	height: 100%;
}

.services__container {
	position: relative;
	display: flex;
	flex-direction: column;
}

.services__header {
	margin: 0px 0px 74px 0px;
}

.services__items {
	display: flex;
	flex-wrap: wrap;
	row-gap: 24px;
	margin: 0px 12px;
}

.services__items:not(:last-child) {
	margin: 0px 0px 66px 0px;
}

.services__item {
	flex: 1 1 33.333%;
	padding: 0px 12px;
	min-width: 300px;
}

.services__button {
	align-self: center;
	background-color: #f2726f;
	border-radius: 8px;
	text-align: center;
	color: #fff;
	text-transform: uppercase;
	font-size: 12px;
	font-weight: 700;
	line-height: 2;
	padding: 12px 25px;
	/* margin: 66px 0px 0px 0px; */
}

.item-services {
	background-color: #fff;
	border-radius: 20px;
	padding: 50px 44px;
	display: flex;
	flex-direction: column;
	text-align: center;
	align-items: center;
	height: 100%;
}

.item-services__icon {
	width: 63px;
	flex: 0 0 63px;
	display: flex;
	align-items: flex-end;
	justify-content: center;
}

.item-services__img {
	max-width: 100%;
	max-height: 63px;
}

.item-services__icon:not(:last-child) {
	margin: 0px 0px 33px 0px;
}

.item-services__title:not(:last-child) {
	margin: 0px 0px 20px 0px;
}

.item-services__text:not(:last-child) {
	margin: 0px 0px 20px 0px;
}

.item-services__text {
	flex: 1 1 auto;
}

.item-services__link {
	color:#f2726f;
	font-weight: 700;
}

/* Mēs blokam: services varam noteikt ārējo apakšējo atstarpi divos veidos: nosakot augšējo ārējo atstarpi pogai, vai izmantojam pseido klasi :not(:last-child) priekš kartītēm un nosakām apakšējo ārējo atstarpi. Mēs esam jau pieraduši ārējās atstarpes noteikt uz leju, tādēļ par primāro variantu uzskatām noteikt ārējo apakšējo atstarpi kartīšu klasei izmantojot pseido klasi. */

/* Lai mums būtu ērtāk strādāt ar kartīšu virsrakstiem un tekstu, atgriežamies HTML dokumentā, katram kartīšu virsrakstam un tekstam pievienojam jaunu BEM metodoloģijas klasi. Šeit kaskādes stilos, pierakstām stilus šīm abām papildus klasēm. */

/* Mūsu sešas kartītes ir gatavas. Bet tagad izskatīsim situāciju, kad katras kartītes apakšā mums ir saite. Atgriežamies HTML dokumentā, un zem katras kartītes izveidojam saiti. Stilizējam mūsu saiti. */

/* Turpinām strādāt ar piemēriem, izstrādājot nākošo bloku: impact. Atgriežamies HTML dokumentā un izstrādājam struktūru. Atgriežamies šeit un pievienojam kaskādes stilus. HTML dokumenta struktūrā izstrādājam papildus klases baltajiem elementiem, šeit tos stilizējam. */

.title__label_white {
	color: #fff;
	background: url("../img/dog_page/icons/icon_impact.svg") 0 -2px no-repeat;
}

.title__item_white {
	color: #fff;
}

.impact {
	background-color: #29c3be;
	padding: 0px 0px 212px;
}

.impact__container {
	position: relative;
}

.impact__container::before {
	content: "";
	position: absolute;
	top: 0;
	right: 50%;
	transform: translate(93%, 0%);
	height: 100%;
	width: 68%;
	background: url("../img/dog_page/impact/blob_2.png") 0 0 / 100% no-repeat;
}

.impact__body {
	display: flex;
	position: relative;
	margin: 20px 0px -15px;
}

.impact__body:not(:last-child) {
	margin-bottom: 80px;
}

.impact__content {
	padding: 0px 15px;
	flex: 0 0 50%;
	align-self: flex-end;
}

.impact__header {
	max-width: 420px;
}

.impact__image {
	padding: 0px 15px;
	flex: 0 0 50%;
	margin: -10% 0px 0px;
}

.impact__img {
	max-width: 100%;
	border-radius: 40px;
}

.impact__items {
	display: flex;
	align-items: flex-start;
	flex-wrap: wrap;
	margin: 0px -12px;
	row-gap: 24px;
}

.impact__item {
	padding: 0px 12px;
	flex: 0 1 25%;
}

.item-impact {
	display: flex;
	column-gap: 11px;
	align-items: flex-start;
}

.item-impact__body {
	align-self: center;
}

.item-impact__icon {
	flex: 0 0 76px;
}

.item-impact__value {
	color: #fff;
	font-weight: 900;
	font-size: 36px;
	line-height: 1.17;
}

.item-impact__value:not(:last-child) {
	margin: 0px 0px 3px 0px;
}

.item-impact__text {
	font-size: 16px;
	font-weight: 700;
	line-height: 1.5;
	letter-spacing: 0.15px;
	color: #5d62b5;
}
