
/* Sākumā atceramies kā pieslēgt šriftus: */

@import url("https://fonts.googleapis.com/css?family=Roboto:regular,500,700,900&display=swap");

/* @font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Regular.woff2") format("woff2"),
		url("../fonts/Gilroy-Regular.woff") format("woff");
	font-weight: normal;
	font-style: normal;
	font-display: swap;
}

@font-face {
	font-family: "Gilroy";
	src:
		url("../fonts/Gilroy-Bold.woff2") format("woff2"),
		url("../fonts/Gilroy-Bold.woff") format("woff");
	font-weight: bold;
	font-style: normal;
	font-display: swap;
} */

[class*="__container"] {
	max-width: 1050px;
	margin: 0 auto;
	padding: 0 15px;
	/* box-sizing: content-box; */
}

/* Mēs izmantojam šo klasi, lai ierobežotu saturu, lai tas nebūtu pārāk plats. */

/* Kādēļ mēs iekš __container mainām CSS parametru: box-sizing: content-box? Mēs to mainām, tādēļ, lai tajā netiktu ieskaitīts: padding: 15px. Lai tas neietekmētu: __container izmēru. Protams mēs varam vienkārši tos 30px pieskaitīt pie konteinera max-width un nemainīt box-sizing. Jo rezultāts būs identisks. Šeit varam izmantot jeb kuru no šiem variantiem, rezultāts nemainīsies. */

/* Ar content-box izmantošanu ir viena priekšrocība: ums nevajag neko rēķināt, mēs vienkārši pierakstām: box-sizing: content-box un vis, bet šie aprēķini nav tik grūti, lai tos nevarētu izdarīt. Mēs aprēķinot padding varam samazināt kodu pa vienu rindu. Tam gan nav lielas nozīmes. Šeit varam izvēlēties: darīt tā kā mums ir ērtāk. */

/* Šinī lekcijā mēs mācīsimies par HTML, par formu izveidi. Strādāsim pārsvarā HTML failā. */

/* Līdz šim lietotājs ar mūsu lapu varēja mijiedarboties, tikai nospiežot uz kādas pogas, apskatot kādu animāciju. Bet tagad mēs iepazīsim jaunus HTML tegs, lai mēs varētu no lapas lietotāja iegūt kādus datus, lai mēs tos saņemtu un varētu lietotājam atbildēt. Lietotājs izmantojot mūsu lapu mijiedarbojas ar mums, ar mūsu izstrādāto lapu. Protams, gala rezultātā mēs mūsu izstrādāto lapu atdodam klientam - pasūtītājam. */

/* Lai mēs varētu no lapas lietotāja iegūt datus mums ir vajadzīgas formas. Tie ir vesela HTML tegu kopa, kurus mēs šodien apgūsim. */

/* Mēs izmantojam teg: <form></form>, kam ir atribūts: action, kas ir obligāts jebkurai formai. Šis teg ir obligāts, tas ir galvenais, un vis, kas ir iekš tā ir tieši tas, kam pateicoties mēs varam mijiedarboties ar lietotāju. Iekš atribūta: action šobrīd liekam restīti: #, lai forma iet cauri validatoram. */

/* Kas tad ir atribūts: action, un ko mēs rakstām iekš tā vērtības, iekš: "" pēdiņām. Tas ir domāts, lai mēs noteiktu adresi uz kuru aizies šīs formas dati. Pagaidām mēs tur vienkārši ieliekam: #. */

/* Mēs nevaram iekš atribūta: action vērtībā norādīt kādu HTTP adresi, jo tas nestrādās. Mēs varam izmantot serverus, kur būs jau PHP programmēšanas valoda. To visu dara BackEnd speciālists. */

/* Mēs esam atbildīgi par vizuālo daļu, par formas izstrādāšanu iekš HTML un stilizēšanu izmantojot kaskādes tabulas stilus, CSS, bet par pārējo mēs neatbildam, jo tālāk strādā BackEnd speciālists. */

/* Otrs ļoti svarīgs teg: form atribūts ir: method: "", kas nosaka datu nodošanas metodi. */

/* Atribūts: action atbild par formas datu adresi, saņēmēju, bet atribūts: method atbild par datu nodošanas veidu. */

/* Noklusētā atribūta: method vērtība ir: "get". Parasti šo atribūtu mēs neaiztiekam, tādēļ arī iekš tega form nenorādām. */

/* Kad izmantojam atribūtu method: "get" dati tiek nodoti tieši HTTP adresē. Vēlāk mēs izskatīsim ar piemēriem kā tas darbojas. */

/* Atribūtam: method ir vēl viena vērtība: "post", kas nozīmē, ka dati tiek nodoti slēpti. Kā tieši, to mēs izskatīsim vēlāk, bet īsumā tas nozīmē, ka mēs neredzam kā tiek nodoti dati. */

/* Iekš tega: form ir vēl atribūts: encrypt, kura vērtības nosaka kāda tipa datus mēs nododam, vai tas būs teksts, vai faili. Īsāk sakot, mēs nosakām, kas tieši tiks nodots. Īsāk sakot atribūts: encrypt nozīmē: kāds datu tips tiek nodots. */

/* Pie form izstrādāšanas mums ir iespēja noteikt, ka lietotājs var pievienot failus. To vēlāk mēs arī izskatīsim ar piemēru. */

/* Bet 99% gadījumu, visas formas ko mēs izstrādāsim kā lapu izstrādātāji, no BackEnd puses tiks pārtaisītas, bet, ja mēs zinam, ka būs vajadzība, lai formā varētu pievienot failus, tad kā laba izstrādātāja pienākums ir: iekš tega: form norādīt atribūtu: encrypt. */

/* Iekš mūsu formas ir teg: input, kas dod iespēju mums ievadīt datus. Tas ir redzams HTML dokumenta elements un, tas tā pat kā saite skaitās interaktīvs elements, kas darbojas ar tabulāciju, ar taustiņu: TAB. Tas iegūst fokusu, kad mēs uz tā apstājamies. Tam pēc noklusējuma jau ir CSS parametrs: outline. */

/* Form elementam input pēc noklusējuma tiek izmantota CSS pseido klase: focus, kam pēc noklusējuma tiek piemērots CSS parametrs: outline. */

/* Elements: input ir ļoti jaudīgs, jo tam ir atribūts: type, kas nosaka kāda veida dati tiek ievadīti, teksts, lietotājvārds, parole, utt. Mēs vēl izskatīsim kādas vērtības iekš atribūta: type mēs varam izmantot. */

/* Tega input atribūts: type nosaka kāda veida dati tiks ievadīti dotajā lauciņā. */

/* Tegam input vēl ir atribūts: value, kas kopā ar atribūtu: type nosaka datu noklusēto vērtību, piemēram: name, age utt. */

/* Katram tegam: input ir obligāts atribūts: name, kas nosaka kas tiks nosūtīts uz serveri vai kaut kur citur. Tieši ko mēs redzēsim. Ja mēs iekš atribūta: name= kā vērtību norādīsim: "username", tad tieši tas arī aizies uz serveri. */

/* Šie tega: input visi atribūti mums jānorāda kopā, jo tie darbojas tikai kopā. Ja mēs izmantojam gan atribūtu: name, gan atribūtu: value, tad rezultātā mēs redzam: username=user. Piemēram: username=zany1919. Tas ir tas, ko redzēs BackEnd speciālists, kas varēs uzreiz noteikt kāda tipa dati ir ienākuši. */

/* Nākošais tega: input atribūts ir: required, kas nozīmē, ka šis lauks ir obligāti jāaizpilda, jo pretējā gadījumā formu nevarēs aizpildīt, nevarēs nosūtīt, ja konkrētais ievades lauks netiks aizpildīts. */

/* Izmantojot atribūtu required iekš tega: input notiek tāda kā iekšēja pārlūka formas validācija. Tas pārbauda vai konkrētais lauks ir aizpildīts. */

/* Labākais veids kā apstrādāt validāciju ir: izmantot JavaScript, pārbaudīt vai formas lauki: input ir aizpildīti, vai izvadīt kādu kļūdu. Pārbaudīt kā tieši ir aizpildīti formas laukumi utt. */

/* Retāk izmantojams atribūts iekš tega: input ir: maxlength="10", kura vērtība: 10 nosaka, ka var tikt ievadīti tikai 10 simboli. Šādi mēs varam ierobežot lietotāja ievades datus. Bet tas tiek izmantots retāk. */

/* Ļoti svarīgs tega: input atribūts ir: placeholder="", kas būtiski uzlabo lapas lietojamību. Tā vērtībā mēs nosakām, kas lietotājam konkrētajā lauciņā: input ir jāievada, kāda veida dati. Mēs itkā nedaudz pasakām lietotājam priekšā, kas viņam dotajā laukumā ir jāievada. Tas ir ļoti svarīgi, jo tas būtiski uzlabo lapas lietojamību. */

/* Kāda ir atšķirība starp atribūtiem: value un placeholder? Value ir vērtība, bet placeholder ir tā kā paraksts, tas ir pēc noklusējuma pa pusei caurspīdīgs, un tam nav vērtības, tas vienkārši pasaka mums priekšā, kas ir jāievada. Bet value izmanto noteiktu vērtību. */

/* Atribūts: placeholder tiek izmantots, kad mums nav atribūts: value. Placeholder ir kā paraksts, kas pazūd, kad mēs uz tā uzklikšķinām un sākam ievadīt datus. Šis atribūts: placeholder netiek sūtīts uz serveri. Kamēr atribūts: value tiek sūtīts uz serveri. */

/* Tegam: input ir vēl viens atribūts, kas mums retos gadījumos, bet var noderēt: autocomplete="off". Tā izmantošana nozīmē, ka pārlūks mums nedos ieteikumus, ko ievadīt dotajā laukumā, dotajā ievades lodziņā - input. Retās reizēs, bet tas var mums noderēt. */

/* Tegam input ir vēl daudz retāk izmantojami atribūti, bet šie ir visbiežāk izmantojamie. */

/* Ja mēs mainām atribūta: type="" vērtību no text uz number, tad mēs varam ievadīt tikai skaitļus. Mēs vairs nevaram ievadīt burtus. Atceramies: lapas lietojamībai iekš atribūta: placeholder="" mums jānorāda: number, kas liek lietotājam saprast, ka tur ir jāievada skaitļi. */

/* Pie atribūta; type="number" mēs redzam, ka ievades lauciņā mums parādās labajā malā tādas kā bultiņas, kas palielina vai samazina skaitli. */

/* Katram no input, ar attiecīgajiem atribūtiem un to vērtībām tiek piemēroti noklusējuma stili. Tos mēs varam kontrolēt, mainīt izmantojot JavaScript, bet par to mācīsimies vēlāk. */

/* Nākošā atribūta: type="" vērtība ir: tel, kas nozīmē, ka šeit tiek ievadīts telefona numurs. Bet šeit ir būtiska lieta: uz datora mēs varam ievadīt burtus, bet uz telefona uzreiz tiek atvērta ciparnīca, kas uzreiz paredz, ka tiek ievadīti skaitļi. */

/* Strādājot ar tegu input atceramies: norādīt katram input atribūtu: placeholder="" ar attiecīgo vērtību, to, ko mēs vēlamies lai redz lietotājs. */

/* Ja mums ir telefona numurs, tātad mums mūsu formā ir arī e-pasts. Mums tikai jāieraksta iekš atribūta: type="email". Neaizmirstam par atribūtu: placeholder, kur mēs norādām lietotājam norādi kas ir jāievada. Šajā gadījumā: "e-mail". */

/* Šeit, ja izmantosim atribūtu: required tiks pārbaudīts, vai tiešām te ir ievadīts e-pasts. Vai ir izmantota zīme: @. Šis ir tas gadījums, kad required darbojas kā validators, vai mēs esam ievadījuši derīgus datus. */

/* Svarīgi: iekš katra tega: input mainīt arī atribūta: name="" vērtības. */

/* Nākošā atribūta: type="" vērtība ir: date, kas lietotājam dod iespēju ievadīt datumu. Kā papildinājums šai vērtībai ir vērtība: datetime-local, kas ļauj lietotājam ievadīt gan datumu, gan laiku. */

/* Būtiski: Iekš tega input atribūta: type="" vērtībām date un datetime-local mēs neredzam atribūta placeholder vērtību. */

/* Nākošā atribūta: type vērtība ir: type="checkbox", kas nozīmē izvēle ar loģisko operatoru: UN. Iespēja ievilkt ķeksīti. Pārbaudes lodziņš ( checkbox ). Lietotājs var izvēlēties vairākus variantus. */ 

/* Iekš atribūta: name="" mēs rakstām to ko gribam pārbaudīt, bet atribūta: value="" noklusētā vērtība ir: on. */

/* Visi input ir bloka rindas tipa elementi, un uz tiem darbojas daudzie CSS parametri. Tegiem input ir noteikts lielums un pēc noklusējuma tie ir diezgan mazi un sastājas vienā rindā ( ja ir vieta ). Bet mēs mācīsimies tos stilizēt, lai mūsu forma iegūtu skaistu izskatu, jo pagaidām tai ir piemēroti noklusējuma stili. */

/* Ir arī cita veida checkbox. kur mums ir tikai viena izvēle, ar operatoru: VAI. Tā saucamā radio poga. Kur mēs izvēlamies, vai nu vienu variantu, vai otru variantu. */

/* Lai pārnestu kādu tegu: input jaunā rindā, mums tas vienkārši jāieliek iekš kastītes. Izdarām to iekš HTML dokumentiem ar mūsu checkbox. Mēs iekš atribūta: type="" vērtības rakstam: radio. Mums izveidojas izvēle VAI. */

/* Izveidojam iekš HTML dokumenta divas radio tipa izvēlnes, vīrietis vai sieviete. */

/* Lai izveidotu radio izvēlnes grupu: jābūt vienādām atribūta: name="" vērtībām, jo šis atribūts savieno radio izvēlni. */

/* Radio izvēlnei nāk klāt jauns obligāts atribūts: checked, ko izmantojam attiecīgajam variantam, kuru vēlamies pēc noklusējuma atzīmēt, izvēlēties. Lietotājs protams var mainīt šo izvēli, izvēloties vienu vai otru variantu. Šeit arī ir radio izvēlnes būtība: VAI? */

/* Atribūts checked strādā arī ar checkbox. Mēs pēc noklusējuma varam to noteikt, bet lietotājs var to mainīt. */

/* Atceramies: ja mēs vēlamies izveidot radio izvēlnes grupas, tad mums jāievēro, lai katrai grupai, tās elementiem būtu vienāda atribūta: name="" vērtības. */

/* Vēl viens atribūts, kas mums ir jāzin, ir atribūts: disabled, kas var tikt piemērots jeb kuram tegam: input. Tas nozīmē, ja mēs kādam no tegiem: input izmantojam atribūtu: disabled, tas nozīmē, ka mēs konkrēto ievades lodziņu atslēdzam. Tas kļūst neaktīvs. Tas ir redzams, bet nav lietojams. */

/* Vēl viens input tega atribūta: type="" vērtība ir: password. Būtiskākā atšķirība starp visiem citiem input ir tā,ka pie type="password" izmantošanas mēs neredzam to, ko mēs ievadām, mēs redzam punktiņus. */

/* Mums ir vēl pēdējais input variants, ar atribūta: type="" vērtību: file. Mēs redzam, ka mums parādās lodziņš: izvēlieties failu. Mēs iegūstam lauciņu, kur nospiežot mēs varam izvēlēties failu. */

/* Šeit iekš atribūta: type="password" izmantošanas mums ir vēl viens mums jauns atribūts: multiple, kas ļauj mums pievienot vairākus failus. */

/* Vēl viens atribūts, kuru mēs varam izmantot iekš atribūta: type="file" izmantošanas ir: accept="", kura vērtībās mēs varam norādīt konkrētus faila paplašinājumus, kurus varam pievienot, piemēram: accept=".jpg, .png". Rezultātā mēs varēsim pievienot tikai tos failus, kam ir attiecīgie paplašinājumi. Nospiežot uz izvēlēties failu, tiks parādīti tikai tie faili, kam ir dotie paplašinājumi. Protams lietotājs to var mainīt nospiežot uz visi failu formāti. Ja gadījumā izstrādātājs nav uzlicis kādu spēcīgu aizsardzību. */

/* Būtiski: atļautos - pievienojamos failu paplašinājums svarīgi ir atdalīt ar komatu, pirms katra liekot punktu, jo citādi mums nekas nedarbosies. */

/* Ir vēl citas atribūta: type="" vērtības kā piemēram: "range", kas dod regulējamu līniju, kas pēc izskata atgādina skaļuma regulatoru. */

/* Rezultātā izveidojot: range mēs redzam, ka tam ir noklusējuma stili. */

/* Dažus input mēs varēsim stilizēt, ievades laukumus, bet range un checkbox, file, date un radio pogas mēs nevaram stilizēt. */

/* Lai mēs varētu stilizēt visus šos input, mums ir vajadzīgas atsevišķas JavaScript bibliotēkas, bet tās visas mums vēlāk būs: starta šablonā. */

/* Iekš forms ir vēl viens iespējamais teg: textarea, kas arī nozīmē datu ievadi, bet jau daudzās rindās, nevis tā kā mums bija līdz šim vienā rindā. SĒit obligāti atribūti ir: name un placeholder. */

/* Ievērojam: iekš katram input un iekš katra formas tega mums ir obligāts atribūts: placeholder. Ja mēs to nenosakām, tad mums ir kļūda. Tas ir obligāts. */

/* Mēs varam pamanīt, ka iekš tega: textarea ir vēl atribūti: rows un cols, kas nozīmē faktiski textarea augstumu, cik rindu liela būs ievades vieta, bet realitātē šie atribūti vairs netiek izmantoti, jo textarea lielumu mēs nosakām izmantojot CSS - kaskādes tabulas stilus. */

/* Mēs ievērojam, ka salīdzinājumā ar tegu input, kam ir tikai atverošais teg, textarea ir aizvēršanās teg. Tas nozīmē, ka iekš tā mēs varam ielikt jebkādu tekstu. Vēl viena īpašība, kas ir textarea, ka mēs varam lapā pavilkt aiz stūrīša, tādā veidā palielinot, samazinot textarea laukumu, kā arī, ja mums ir daudz teksta mums parādās scroll - ritināšanas iespēja. */

/* Teg textarea parasti tiek izmantots formās lai mēs varētu atstāt kādu komentāru, tekstu. */

/* Visi pārējie atribūti ir tieši tādi paši kā iekš tega: input. Iekš tega: textarea mēs varam visus tos izmantot, pēc vajadzības. Teg textarea atšķiras ar to, ka tam ir cita veida mijiedarbība ar lietotāju, ne ar ko vairāk. */

/* Ejam tālāk: izkrītošais saraksts iekš formām. Mēs izveidojam struktūru no jauniem tegiem: select un option, kuri abi ir ar aizslēdzošiem tegiem. Tegam select obligāts atribūts ir: title="". Mēs varam izvēlēties kuram punktam pievienot atribūtu selected, kas nozīmē, ka dotais punkts pēc noklusējuma ir izvēlēts, lietotājs to var mainīt. Tegam select arī ir atribūts: name="". */

/* Arī šeit mēs varam stilizēt pašu select ievades laukumu, bet ne pašus punktus, bet tas tikai pagaidām. Ar starta šablonu mēs visu to varēsim. */

/* Iekš tega: option ir obligāts atribūts: value="", kas katram punktam attiecīgi ir citāds. */

/* Tegam: select ir atribūts: multiple, kas ļauj ar nospiestu ctr taustiņu izvēlēties vairākus punktus. Ja izmantojam atribūtu: multiple, tad mēs iekš tegiem: option varam pievienot atribūtu: selected vairākiem punktiem. */

/* Obligāti iekš jebkuras formas mums ir vajadzīga poga. Teg: button, kam ir arī aizslēdzošais teg. Mums obligāti ir jāizmanto button, lai uzlabotu lapas pieejamību. Lai lietotājs varētu mijiedarboties ar mūsu lapu. */

/* Tegam: button ir obligāts atribūts: type="", kas nosaka ko poga darīs. Ja tur ir vērtība: "button", tad tā ir vienkārša poga, kas nedara neko. Bet mēs šo vērtību varam mainīt uz reset, kas nozīmē to, ka mēs aizpildot formu, nospiežot uz šīs konkrētās pogas attīrām visu formu. Visas vērtības tiek notīrītas, tiek atiestatītas uz noklusējuma vērtībām. */

/* Pati galvenā pogas atribūta: type="" vērtība ir: submit, kas kad esam aizpildījuši visu formu, nosūta datus, akceptē mūsu aizpildīto formu un datus nosūta uz BackEnd. */

/* Svarīgi ir zināt par vēl vienu form tegu: teg: label, kas ir kaut kas līdzīgs atribūtam: placeholder, jo tas arī ir kā paraksts, tikai tas ir mav iekš ievades lauka, bet attiecīgai virs tā, vai zem tā, viss atkarīgs no tā, kāds ir uzdevums, pēc maketa, mūsu projekta attiecīgās vietas. */

/* Izskatām to iekš mūsu formas. Izveidojot to virs pirmā input. Svarīgi: teg: label ir rindas tipa elements. Pēc noklusējuma. Mēs redzam, ka tam ir obligāts atribūts: for="", kas nozīmē to, ka šo paraksta rindiņu mēs varam savienot ar kādu no teg input, vienkārši iekš attiecīgā input pievienojot: id="". */

/* Atceramies, ka formas ir interaktīvs elements, ar kuru lietotājs var mijiedarboties. Tas nozīmē, ka pa formas ievades laukumiem var pārvietoties izmantojot tabulāciju, izmantojot taustiņu: TAB. Mēs iekš tegiem: input varam norādīt atribūtu: tabindex="1", kas ļauj mums noteikt kārtību kādā mēs pārvietosimies pa ievades laikiem izmantojot taustiņu: TAB. */

/* Ja mēs iekš atribūta: tabindex="-1" norādīsim šādu vērtību, tad dotais ievades lauks, izmantojot tabulāciju tiks izlaists. */

/* Tagad pastrādāsim ar mūsu vienkāršu izveidotu formu, paskatīsimies kā mēs to varam stilizēt un kā mēs varam nosūtīt datus. Izveidojam vēl vienu formu, jau ar klasēm. */

/* Izstrādājam vienkāršu formas struktūru iekš HTML dokumenta un atgriežamies šeit lai pievienotu stilus. */

.main__form {
	margin: 20px 15px;
}

.form__label {
	display: block;
	margin: 0px 0px 15px 0px;
}

.form__line:not(:last-child) {
	margin: 0px 0px 10px 0px;
}

.form__input {
	height: 20px;
	padding: 0px 10px;
	width: 100%;
	height: 30px;
}

.form__button {
	padding: 10px 15px;
	cursor: pointer;
}

/* Aizpildot formu mēs redzam, ka adreses rindā pārlūkā parādās mūsu formas dati: username=zany1919. Atceramies: iekš HTML mēs varam izmantot tikai atribūtu: method="get". Mēs nevaram izmantot: method="post", jo tie ir neredzamie dati, tos apstrādā BackEnd speciālists. neredzamā puse, servera puse, php programmēšanas valoda. */


